Function name                 Method to implement                 Usage
-------------                 --------------------          ---------------------
Function<T, R>                R call(T)                     Take in one input and return one output, for use with
                                                            operations like map() and filter().
      JavaRDD<String> inputRDD = sc.textFile("log.txt");
      JavaRDD<String> errorsRDD = inputRDD.filter(
      new Function<String, Boolean>() {
      public Boolean call(String x) { return x.contains("error"); }
      } });
      ______________________________________________________________

Function2<T1, T2, R>          R call(T1, T2)                Take in two inputs and return one output, for use with
                                                            operations like aggregate() or fold().
FlatMapFunction<T,R>          Iterable<R>call(T)            Take in one input and return zero or more outputs, for use with
                                                            operations like flatMap().
DoubleFlatMapFunction<T>      Function<T, Iterable<Double>> DoubleRDD from a flatMapToDouble

DoubleFunction<T>             Function<T, double>           DoubleRDD from map ToDouble

PairFlatMapFunction<T, K, V>  Function<T,                   PairRDD<K, V> from a flatMapToPair
                              Iterable<Tuple2<K, V>>>

PairFunction<T, K, V>         Function<T, Tuple2<K, V>>     PairRDD<K, V> from a mapToPair
-------------------------------------------------------------------------

------------------------------------------------------------!
Basic RDD transformations on an RDD containing {1, 2, 3, 3} !
____________________________________________________________!__________________________________________________________________________
Function name               Purpose                             Example                                 Result
______________________________________________________________________________________________________________________________________
map()                 Apply a function to each                  rdd.map(x => x + 1)                     {2, 3, 4, 4}
                      element in the RDD and return
                      an RDD of the result.

flatMap()             Apply a function to each                  rdd.flatMap(x => x.to(3))               {1, 2, 3, 2, 3, 3, 3}
                      element in the RDD and return
                      an RDD of the contents of the
                      iterators returned. Often used to
                      extract words.

filter()              Return an RDD consisting of only          rdd.filter(x => x != 1)                 {2, 3, 3}
                      elements that pass the condition
                      passed to filter().

distinct()            Remove duplicates.                        rdd.distinct()                          {1, 2, 3}

sample(withRe         Sample an RDD, with or without            rdd.sample(false, 0.5)                  Nondeterministic
placement, frac       replacement.
tion, [seed])

collect()             Return all elements                       rdd.collect()                           {1, 2, 3, 3}
                      from the RDD.

count()               Number of elements in the RDD.            rdd.count()                             4

countByValue()        Number of times each element              rdd.countByValue()                      {(1, 1),(2, 1),(3, 2)}
                      occurs in the RDD.

take(num)             Return num elements from the RDD.         rdd.take(2)                             {1, 2}

top(num)              Return the top num elements the RDD.      rdd.top(2)                              {3, 3}

takeOrdered(num)      Return num elements based on provided     rdd.takeOrdered(2)(myOrdering)          {3, 3}
(ordering)            ordering.

takeSample(withReplace
ment, num, [seed])
Return num
elements at
random.
rdd.takeSample(false, 1) Nondeterministic
reduce(func) Combine the
elements of the
RDD together in
parallel (e.g., sum).
rdd.reduce((x, y) => x + y) 9
fold(zero)(func) Same as
reduce() but
with the provided
zero value.
rdd.fold(0)((x, y) => x + y) 9
aggregate(zeroValue)
(seqOp, combOp)
Similar to
reduce() but
used to return a
different type.
rdd.aggregate((0, 0))
((x, y) =>
(x._1 + y, x._2 + 1),
(x, y) =>
(x._1 + y._1, x._2 + y._2))
(9, 4)
foreach(func) Apply the provided
function to each
element of the
RDD.

_____________________________________________________________________________________________________________________________________

Two-RDD transformations on RDDs containing {1, 2, 3} and {3, 4, 5}
_____________________________________________________________________________________________________________________________________

Function name               Purpose                             Example                                 Result

union()                Produce an RDD containing elements       rdd.union(other)                        {1, 2, 3, 3, 4, 5}
                       from both RDDs.


intersection()         RDD containing only elements found       rdd.intersection(other)                 {3}
                       inboth RDDs.

subtract()             Remove the contents of one RDD (e.g.,    rdd.subtract(other)                     {1, 2}
                       remove training data).

cartesian()            Cartesian product with the other RDD.    rdd.cartesian(other)                    {(1, 3), (1,4), â€¦ (3,5)}
